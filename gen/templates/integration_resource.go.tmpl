// Copyright (c) Mondoo, Inc.
// SPDX-License-Identifier: BUSL-1.1
//
// Code generated by gen.go; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	mondoov1 "go.mondoo.com/mondoo-go"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = (*integration{{.ResourceClassName}}Resource)(nil)
var _ resource.ResourceWithImportState = (*integration{{.ResourceClassName}}Resource)(nil)

func NewIntegration{{.ResourceClassName}}Resource() resource.Resource {
	return &integration{{.ResourceClassName}}Resource{}
}

type integration{{.ResourceClassName}}Resource struct {
	client *ExtendedGqlClient
}

type integration{{.ResourceClassName}}ResourceModel struct {
	// scope
	SpaceID types.String `tfsdk:"space_id"`

	// integration details
	Mrn  types.String `tfsdk:"mrn"`
	Name types.String `tfsdk:"name"`

	// {{.ResourceClassName}} options
	{{- range $key, $props := .Fields}}
	{{$key}} {{$props.TerraformType}} `tfsdk:"{{ toSnakeCase $key }}"`
	{{- end}}
}

func (m integration{{.ResourceClassName}}ResourceModel) GetConfigurationOptions() *mondoov1.{{.ResourceClassName}}ConfigurationOptionsInput {
	return &mondoov1.{{.ResourceClassName}}ConfigurationOptionsInput{
		// {{.ResourceClassName}} options
		{{- range $key, $props := .Fields}}
	{{$key}}: {{$props.ConfigurationOption $key}},
		{{- end}}
	}
}

func (r *integration{{.ResourceClassName}}Resource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_integration_{{.TerraformResourceName}}"
}

func (r *integration{{.ResourceClassName}}Resource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: `{{.ResourceClassName}} integration.`,
		Attributes: map[string]schema.Attribute{
			"space_id": schema.StringAttribute{
				MarkdownDescription: "Mondoo space identifier. If there is no space ID, the provider space is used.",
				Optional:            true,
				Computed:            true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"mrn": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "Integration identifier",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"name": schema.StringAttribute{
				MarkdownDescription: "Name of the integration.",
				Required:            true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(250),
				},
			},
			// {{.ResourceClassName}} options
		{{- range $key, $props := .Fields}}
			"{{ toSnakeCase $key }}": {{ $props.TerraformSchemaType }}{
				MarkdownDescription: "The {{$.ResourceClassName}} {{ $key }}",
				{{ $props.AttributeOptionalOrRequired $key }},
				{{- $props.AdditionalSchemaAttributes }}
			},
		{{- end}}
		},
	}
}

func (r *integration{{.ResourceClassName}}Resource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*ExtendedGqlClient)

	if !ok {
		resp.
			Diagnostics.
			AddError("Unexpected Resource Configure Type",
				fmt.Sprintf(
					"Expected *http.Client. Got: %T. Please report this issue to the provider developers.",
					req.ProviderData,
				),
			)
		return
	}

	r.client = client
}

func (r *integration{{.ResourceClassName}}Resource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {

	var data integration{{.ResourceClassName}}ResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Compute and validate the space
	space, err := r.client.ComputeSpace(data.SpaceID)
	if err != nil {
		resp.Diagnostics.AddError("Invalid Configuration", err.Error())
		return
	}
	ctx = tflog.SetField(ctx, "space_mrn", space.MRN())

	// Do GraphQL request to API to create the resource.

	tflog.Debug(ctx, "Creating integration")
	integration, err := r.client.CreateIntegration(ctx,
		space.MRN(),
		data.Name.ValueString(),
		mondoov1.ClientIntegrationType{{.ResourceClassName}},
		mondoov1.ClientIntegrationConfigurationInput{
			{{.ResourceClassName}}ConfigurationOptions: data.GetConfigurationOptions(),
		})
	if err != nil {
		resp.
			Diagnostics.
			AddError("Client Error",
				fmt.Sprintf(
					"Unable to create %s integration. Got error: %s", mondoov1.IntegrationType{{.ResourceClassName}}, err,
				),
			)
		return
	}

	// trigger integration to gather results quickly after the first setup
	_, err = r.client.TriggerAction(ctx,
		string(integration.Mrn),
		mondoov1.ActionTypeRunScan,
	)
	if err != nil {
		resp.
			Diagnostics.
			AddWarning("Client Error",
				fmt.Sprintf(
					"Unable to trigger integration. Got error: %s", err,
				),
			)
		return
	}

	// Save space mrn into the Terraform state.
	data.Mrn = types.StringValue(string(integration.Mrn))
	data.Name = types.StringValue(data.Name.ValueString())
	data.SpaceID = types.StringValue(space.ID())

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *integration{{.ResourceClassName}}Resource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data integration{{.ResourceClassName}}ResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read API call logic

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *integration{{.ResourceClassName}}Resource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data integration{{.ResourceClassName}}ResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Do GraphQL request to API to update the resource.
	opts := mondoov1.ClientIntegrationConfigurationInput{
		{{.ResourceClassName}}ConfigurationOptions: data.GetConfigurationOptions(),
	}

	_, err := r.client.UpdateIntegration(ctx,
		data.Mrn.ValueString(),
		data.Name.ValueString(),
		mondoov1.ClientIntegrationType{{.ResourceClassName}},
		opts,
	)
	if err != nil {
		resp.
			Diagnostics.
			AddError("Client Error",
				fmt.Sprintf(
					"Unable to update %s integration. Got error: %s", mondoov1.IntegrationType{{.ResourceClassName}}, err,
				),
			)
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *integration{{.ResourceClassName}}Resource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data integration{{.ResourceClassName}}ResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Do GraphQL request to API to update the resource.
	_, err := r.client.DeleteIntegration(ctx, data.Mrn.ValueString())
	if err != nil {
		resp.
			Diagnostics.
			AddError("Client Error",
				fmt.Sprintf(
					"Unable to delete %s integration. Got error: %s", mondoov1.IntegrationType{{.ResourceClassName}}, err,
				),
			)
		return
	}
}

func (r *integration{{.ResourceClassName}}Resource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	integration, ok := r.client.ImportIntegration(ctx, req, resp)
	if !ok {
		return
	}
	model := integration{{.ResourceClassName}}ResourceModel{
		Mrn:          types.StringValue(integration.Mrn),
		Name:         types.StringValue(integration.Name),
		SpaceID:      types.StringValue(integration.SpaceID()),
		// {{.ResourceClassName}} options
		{{- range $key, $props := .Fields}}
		{{$key}}: {{$props.ImportConvertion $.ResourceClassName $key }},
		{{- end}}
	}

	resp.State.Set(ctx, &model)
}

// {{.ResourceClassName}} options for import state
type {{.ResourceClassName}}ConfigurationOptions struct {
	{{- range $key, $props := .Fields}}
	{{$key}} {{$props.GoType}} `json:"{{ toSnakeCase $key }}"`
	{{- end}}
}
