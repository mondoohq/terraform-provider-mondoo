// Copyright (c) Mondoo, Inc.
// SPDX-License-Identifier: BUSL-1.1
//
// Code generated by gen.go; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	mondoov1 "go.mondoo.com/mondoo-go"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = (*integrationAzureDevOpsResource)(nil)
var _ resource.ResourceWithImportState = (*integrationAzureDevOpsResource)(nil)

func NewIntegrationAzureDevOpsResource() resource.Resource {
	return &integrationAzureDevOpsResource{}
}

type integrationAzureDevOpsResource struct {
	client *ExtendedGqlClient
}

type integrationAzureDevOpsResourceModel struct {
	// scope
	SpaceID types.String `tfsdk:"space_id"`

	// integration details
	Mrn  types.String `tfsdk:"mrn"`
	Name types.String `tfsdk:"name"`

	// AzureDevOps options
	AutoCloseTickets   types.Bool   `tfsdk:"auto_close_tickets"`
	AutoCreateTickets  types.Bool   `tfsdk:"auto_create_tickets"`
	ClientSecret       types.String `tfsdk:"client_secret"`
	DefaultProjectName types.String `tfsdk:"default_project_name"`
	OrganizationURL    types.String `tfsdk:"organization_url"`
	ServicePrincipalID types.String `tfsdk:"service_principal_id"`
	TenantID           types.String `tfsdk:"tenant_id"`
}

func (m integrationAzureDevOpsResourceModel) GetConfigurationOptions() *mondoov1.AzureDevopsConfigurationOptionsInput {
	return &mondoov1.AzureDevopsConfigurationOptionsInput{
		// AzureDevOps options
		AutoCloseTickets:   mondoov1.Boolean(m.AutoCloseTickets.ValueBool()),
		AutoCreateTickets:  mondoov1.Boolean(m.AutoCreateTickets.ValueBool()),
		ClientSecret:       mondoov1.String(m.ClientSecret.ValueString()),
		DefaultProjectName: mondoov1.NewStringPtr(mondoov1.String(m.DefaultProjectName.ValueString())),
		OrganizationURL:    mondoov1.String(m.OrganizationURL.ValueString()),
		ServicePrincipalID: mondoov1.String(m.ServicePrincipalID.ValueString()),
		TenantID:           mondoov1.String(m.TenantID.ValueString()),
	}
}

func (r *integrationAzureDevOpsResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_integration_azure_dev_ops"
}

func (r *integrationAzureDevOpsResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: `AzureDevOps integration.`,
		Attributes: map[string]schema.Attribute{
			"space_id": schema.StringAttribute{
				MarkdownDescription: "Mondoo space identifier. If there is no space ID, the provider space is used.",
				Optional:            true,
				Computed:            true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"mrn": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "Integration identifier",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"name": schema.StringAttribute{
				MarkdownDescription: "Name of the integration.",
				Required:            true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(250),
				},
			},
			// AzureDevOps options
			"auto_close_tickets": schema.BoolAttribute{
				MarkdownDescription: "The AzureDevOps AutoCloseTickets",
				Required:            true,
			},
			"auto_create_tickets": schema.BoolAttribute{
				MarkdownDescription: "The AzureDevOps AutoCreateTickets",
				Required:            true,
			},
			"client_secret": schema.StringAttribute{
				MarkdownDescription: "The AzureDevOps ClientSecret",
				Required:            true,
			},
			"default_project_name": schema.StringAttribute{
				MarkdownDescription: "The AzureDevOps DefaultProjectName",
				Optional:            true,
			},
			"organization_url": schema.StringAttribute{
				MarkdownDescription: "The AzureDevOps OrganizationURL",
				Required:            true,
			},
			"service_principal_id": schema.StringAttribute{
				MarkdownDescription: "The AzureDevOps ServicePrincipalID",
				Required:            true,
			},
			"tenant_id": schema.StringAttribute{
				MarkdownDescription: "The AzureDevOps TenantID",
				Required:            true,
			},
		},
	}
}

func (r *integrationAzureDevOpsResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*ExtendedGqlClient)

	if !ok {
		resp.
			Diagnostics.
			AddError("Unexpected Resource Configure Type",
				fmt.Sprintf(
					"Expected *http.Client. Got: %T. Please report this issue to the provider developers.",
					req.ProviderData,
				),
			)
		return
	}

	r.client = client
}

func (r *integrationAzureDevOpsResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {

	var data integrationAzureDevOpsResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Compute and validate the space
	space, err := r.client.ComputeSpace(data.SpaceID)
	if err != nil {
		resp.Diagnostics.AddError("Invalid Configuration", err.Error())
		return
	}
	ctx = tflog.SetField(ctx, "space_mrn", space.MRN())

	// Do GraphQL request to API to create the resource.

	tflog.Debug(ctx, "Creating integration")
	integration, err := r.client.CreateIntegration(ctx,
		space.MRN(),
		data.Name.ValueString(),
		mondoov1.ClientIntegrationTypeTicketSystemAzureDevOps,
		mondoov1.ClientIntegrationConfigurationInput{
			AzureDevOpsConfigurationOptions: data.GetConfigurationOptions(),
		})
	if err != nil {
		resp.
			Diagnostics.
			AddError("Client Error",
				fmt.Sprintf(
					"Unable to create %s integration. Got error: %s", mondoov1.IntegrationTypeTicketSystemAzureDevOps, err,
				),
			)
		return
	}

	// trigger integration to gather results quickly after the first setup
	_, err = r.client.TriggerAction(ctx,
		string(integration.Mrn),
		mondoov1.ActionTypeRunScan,
	)
	if err != nil {
		resp.
			Diagnostics.
			AddWarning("Client Error",
				fmt.Sprintf(
					"Unable to trigger integration. Got error: %s", err,
				),
			)
		return
	}

	// Save space mrn into the Terraform state.
	data.Mrn = types.StringValue(string(integration.Mrn))
	data.Name = types.StringValue(data.Name.ValueString())
	data.SpaceID = types.StringValue(space.ID())

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *integrationAzureDevOpsResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data integrationAzureDevOpsResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read API call logic

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *integrationAzureDevOpsResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data integrationAzureDevOpsResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Do GraphQL request to API to update the resource.
	opts := mondoov1.ClientIntegrationConfigurationInput{
		AzureDevOpsConfigurationOptions: data.GetConfigurationOptions(),
	}

	_, err := r.client.UpdateIntegration(ctx,
		data.Mrn.ValueString(),
		data.Name.ValueString(),
		mondoov1.ClientIntegrationTypeTicketSystemAzureDevOps,
		opts,
	)
	if err != nil {
		resp.
			Diagnostics.
			AddError("Client Error",
				fmt.Sprintf(
					"Unable to update %s integration. Got error: %s", mondoov1.IntegrationTypeTicketSystemAzureDevOps, err,
				),
			)
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *integrationAzureDevOpsResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data integrationAzureDevOpsResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Do GraphQL request to API to update the resource.
	_, err := r.client.DeleteIntegration(ctx, data.Mrn.ValueString())
	if err != nil {
		resp.
			Diagnostics.
			AddError("Client Error",
				fmt.Sprintf(
					"Unable to delete %s integration. Got error: %s", mondoov1.IntegrationTypeTicketSystemAzureDevOps, err,
				),
			)
		return
	}
}

func (r *integrationAzureDevOpsResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	integration, ok := r.client.ImportIntegration(ctx, req, resp)
	if !ok {
		return
	}
	model := integrationAzureDevOpsResourceModel{
		Mrn:     types.StringValue(integration.Mrn),
		Name:    types.StringValue(integration.Name),
		SpaceID: types.StringValue(integration.SpaceID()),
		// AzureDevOps options
		AutoCloseTickets:   types.BoolValue(integration.ConfigurationOptions.AzureDevOpsConfigurationOptions.AutoCloseTickets),
		AutoCreateTickets:  types.BoolValue(integration.ConfigurationOptions.AzureDevOpsConfigurationOptions.AutoCreateTickets),
		ClientSecret:       types.StringValue(integration.ConfigurationOptions.AzureDevOpsConfigurationOptions.ClientSecret),
		DefaultProjectName: types.StringPointerValue(integration.ConfigurationOptions.AzureDevOpsConfigurationOptions.DefaultProjectName),
		OrganizationURL:    types.StringValue(integration.ConfigurationOptions.AzureDevOpsConfigurationOptions.OrganizationURL),
		ServicePrincipalID: types.StringValue(integration.ConfigurationOptions.AzureDevOpsConfigurationOptions.ServicePrincipalID),
		TenantID:           types.StringValue(integration.ConfigurationOptions.AzureDevOpsConfigurationOptions.TenantID),
	}

	resp.State.Set(ctx, &model)
}

// AzureDevOps options for import state
type AzureDevOpsConfigurationOptions struct {
	AutoCloseTickets   bool    `json:"auto_close_tickets"`
	AutoCreateTickets  bool    `json:"auto_create_tickets"`
	ClientSecret       string  `json:"client_secret"`
	DefaultProjectName *string `json:"default_project_name"`
	OrganizationURL    string  `json:"organization_url"`
	ServicePrincipalID string  `json:"service_principal_id"`
	TenantID           string  `json:"tenant_id"`
}
